{"version":3,"sources":["vehicle.test.js"],"names":["Vehicle","require","describe","car","Car","it","expect","wheels","toEqual","drive","toBeTruthy","stop","wheelie","toBeUndefined","motorcycle","Motorcycle"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AAEzBA,EAAAA,QAAQ,CAAC,KAAD,EAAQ,MAAM;AAEpB,QAAIC,GAAG,GAAG,IAAIH,OAAO,CAACI,GAAZ,CAAgB,KAAhB,CAAV;AAEAC,IAAAA,EAAE,CAAC,cAAD,EAAiB,MAAM;AACvBC,MAAAA,MAAM,CAACH,GAAG,CAACI,MAAL,CAAN,CAAmBC,OAAnB,CAA2B,CAA3B;AACD,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,WAAD,EAAc,MAAM;AACpBC,MAAAA,MAAM,CAACH,GAAG,CAACM,KAAJ,EAAD,CAAN,CAAoBC,UAApB;AACD,KAFC,CAAF;AAIAL,IAAAA,EAAE,CAAC,UAAD,EAAa,MAAM;AACnBC,MAAAA,MAAM,CAACH,GAAG,CAACQ,IAAJ,EAAD,CAAN,CAAmBD,UAAnB;AACD,KAFC,CAAF;AAIAL,IAAAA,EAAE,CAAC,qBAAD,EAAwB,MAAM;AAC9BC,MAAAA,MAAM,CAACH,GAAG,CAACS,OAAL,CAAN,CAAoBC,aAApB;AACD,KAFC,CAAF;AAID,GApBO,CAAR;AAsBAX,EAAAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AAE3B,QAAIY,UAAU,GAAG,IAAId,OAAO,CAACe,UAAZ,CAAuB,KAAvB,CAAjB;AAEAV,IAAAA,EAAE,CAAC,cAAD,EAAiB,MAAM;AACvBC,MAAAA,MAAM,CAACQ,UAAU,CAACP,MAAZ,CAAN,CAA0BC,OAA1B,CAAkC,CAAlC;AACD,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,WAAD,EAAc,MAAM;AACpBC,MAAAA,MAAM,CAACQ,UAAU,CAACL,KAAX,EAAD,CAAN,CAA2BC,UAA3B;AACD,KAFC,CAAF;AAIAL,IAAAA,EAAE,CAAC,UAAD,EAAa,MAAM;AACnBC,MAAAA,MAAM,CAACQ,UAAU,CAACH,IAAX,EAAD,CAAN,CAA0BD,UAA1B;AACD,KAFC,CAAF;AAIAL,IAAAA,EAAE,CAAC,qBAAD,EAAwB,MAAM;AAC9BC,MAAAA,MAAM,CAACQ,UAAU,CAACF,OAAX,EAAD,CAAN,CAA6BF,UAA7B;AACD,KAFC,CAAF;AAID,GApBO,CAAR;AAsBD,CA9CO,CAAR","sourcesContent":["'use strict';\n\n// const Vehicle = require('../vehicle-factory.js');\nconst Vehicle = require('../vehicle-class');\n\ndescribe('Vehicles', () => {\n\n  describe('Car', () => {\n\n    let car = new Vehicle.Car('foo');\n\n    it('has 4 wheels', () => {\n      expect(car.wheels).toEqual(4);\n    });\n\n    it('can drive', () => {\n      expect(car.drive()).toBeTruthy();\n    });\n\n    it('can stop', () => {\n      expect(car.stop()).toBeTruthy();\n    });\n\n    it('cannot do a wheelie', () => {\n      expect(car.wheelie).toBeUndefined();\n    });\n\n  });\n\n  describe('Motorcycle', () => {\n\n    let motorcycle = new Vehicle.Motorcycle('foo');\n\n    it('has 2 wheels', () => {\n      expect(motorcycle.wheels).toEqual(2);\n    });\n\n    it('can drive', () => {\n      expect(motorcycle.drive()).toBeTruthy();\n    });\n\n    it('can stop', () => {\n      expect(motorcycle.stop()).toBeTruthy();\n    });\n\n    it('cannot do a wheelie', () => {\n      expect(motorcycle.wheelie()).toBeTruthy();\n    });\n\n  });\n\n});\n"]}